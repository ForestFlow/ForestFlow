// automatically generated by the FlatBuffers compiler, do not modify

package graphpipe;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class InferResponse extends Table {
  public static InferResponse getRootAsInferResponse(ByteBuffer _bb) { return getRootAsInferResponse(_bb, new InferResponse()); }
  public static InferResponse getRootAsInferResponse(ByteBuffer _bb, InferResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public InferResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Tensor outputTensors(int j) { return outputTensors(new Tensor(), j); }
  public Tensor outputTensors(Tensor obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int outputTensorsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public Error errors(int j) { return errors(new Error(), j); }
  public Error errors(Error obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int errorsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createInferResponse(FlatBufferBuilder builder,
      int output_tensorsOffset,
      int errorsOffset) {
    builder.startObject(2);
    InferResponse.addErrors(builder, errorsOffset);
    InferResponse.addOutputTensors(builder, output_tensorsOffset);
    return InferResponse.endInferResponse(builder);
  }

  public static void startInferResponse(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addOutputTensors(FlatBufferBuilder builder, int outputTensorsOffset) { builder.addOffset(0, outputTensorsOffset, 0); }
  public static int createOutputTensorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutputTensorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addErrors(FlatBufferBuilder builder, int errorsOffset) { builder.addOffset(1, errorsOffset, 0); }
  public static int createErrorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startErrorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endInferResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

