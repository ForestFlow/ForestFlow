// automatically generated by the FlatBuffers compiler, do not modify

package graphpipe;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class InferRequest extends Table {
  public static InferRequest getRootAsInferRequest(ByteBuffer _bb) { return getRootAsInferRequest(_bb, new InferRequest()); }
  public static InferRequest getRootAsInferRequest(ByteBuffer _bb, InferRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public InferRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String config() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer configAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer configInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String inputNames(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int inputNamesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Tensor inputTensors(int j) { return inputTensors(new Tensor(), j); }
  public Tensor inputTensors(Tensor obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int inputTensorsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public String outputNames(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int outputNamesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createInferRequest(FlatBufferBuilder builder,
      int configOffset,
      int input_namesOffset,
      int input_tensorsOffset,
      int output_namesOffset) {
    builder.startObject(4);
    InferRequest.addOutputNames(builder, output_namesOffset);
    InferRequest.addInputTensors(builder, input_tensorsOffset);
    InferRequest.addInputNames(builder, input_namesOffset);
    InferRequest.addConfig(builder, configOffset);
    return InferRequest.endInferRequest(builder);
  }

  public static void startInferRequest(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addConfig(FlatBufferBuilder builder, int configOffset) { builder.addOffset(0, configOffset, 0); }
  public static void addInputNames(FlatBufferBuilder builder, int inputNamesOffset) { builder.addOffset(1, inputNamesOffset, 0); }
  public static int createInputNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInputTensors(FlatBufferBuilder builder, int inputTensorsOffset) { builder.addOffset(2, inputTensorsOffset, 0); }
  public static int createInputTensorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputTensorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOutputNames(FlatBufferBuilder builder, int outputNamesOffset) { builder.addOffset(3, outputNamesOffset, 0); }
  public static int createOutputNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutputNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endInferRequest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

