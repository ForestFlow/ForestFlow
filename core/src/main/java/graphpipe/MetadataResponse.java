// automatically generated by the FlatBuffers compiler, do not modify

package graphpipe;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MetadataResponse extends Table {
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb) { return getRootAsMetadataResponse(_bb, new MetadataResponse()); }
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb, MetadataResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public MetadataResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String version() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer versionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer versionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String server() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serverAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer serverInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String description() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public IOMetadata inputs(int j) { return inputs(new IOMetadata(), j); }
  public IOMetadata inputs(IOMetadata obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int inputsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public IOMetadata outputs(int j) { return outputs(new IOMetadata(), j); }
  public IOMetadata outputs(IOMetadata obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int outputsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }

  public static int createMetadataResponse(FlatBufferBuilder builder,
      int nameOffset,
      int versionOffset,
      int serverOffset,
      int descriptionOffset,
      int inputsOffset,
      int outputsOffset) {
    builder.startObject(6);
    MetadataResponse.addOutputs(builder, outputsOffset);
    MetadataResponse.addInputs(builder, inputsOffset);
    MetadataResponse.addDescription(builder, descriptionOffset);
    MetadataResponse.addServer(builder, serverOffset);
    MetadataResponse.addVersion(builder, versionOffset);
    MetadataResponse.addName(builder, nameOffset);
    return MetadataResponse.endMetadataResponse(builder);
  }

  public static void startMetadataResponse(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addVersion(FlatBufferBuilder builder, int versionOffset) { builder.addOffset(1, versionOffset, 0); }
  public static void addServer(FlatBufferBuilder builder, int serverOffset) { builder.addOffset(2, serverOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(3, descriptionOffset, 0); }
  public static void addInputs(FlatBufferBuilder builder, int inputsOffset) { builder.addOffset(4, inputsOffset, 0); }
  public static int createInputsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOutputs(FlatBufferBuilder builder, int outputsOffset) { builder.addOffset(5, outputsOffset, 0); }
  public static int createOutputsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutputsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMetadataResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

